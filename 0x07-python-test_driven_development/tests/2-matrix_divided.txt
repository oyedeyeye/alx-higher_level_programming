# run test with python3 -m doctest -v ./tests/2-matrix_divided.txt

==================================
Test for module 2-matrix_divided.py
==================================

The module has only one method, that we will import.
::
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

SUCCESS CASES
==============
Test with int and floats
::

    >>> matrix = [[3, 4], [4, 5], [3, 6]]
    >>> print(matrix_divided(matrix, 2))
    [[1.5, 2.0], [2.0, 2.5], [1.5, 3.0]]

    >>> matrix = [[1, 2, 3], [4, 5, 6.7]]
    >>> print(matrix_divided(matrix, float("inf")))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

    >>> matrix = [[-1.5], [-2.5]]
    >>> print(matrix_divided(matrix, 2.5))
    [[-0.6], [-1.0]]

    >>> matrix = [[True], [False]]
    >>> print(matrix_divided(matrix, True))
    [[1.0], [0.0]]

FAILED CASES:
=============

Test empty matrix
::

    >>> print(matrix_divided(None, 2))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = []
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = [[], [], []]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test different sizes list of lists
::
    >>> matrix = [[1, 2, 3], [4]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

    >>> matrix = [[1, 2, 3], [4, 5, 6], [7]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Test with other data types
::
    >>> matrix = [["hey"], ["you"]]
    >>> matrix = [["hey"], ["you"]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix = {1, 2, 3, 4}
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    >>> matrix = ([1, 2], [3, 4])
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    >>> matrix = [[1, 2], [3, (4, 5)]]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    >>> matrix = [[1, 2, 3], [4, 5, 6.7]]
    >>> print(matrix_divided(matrix, 3, 5))
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() takes 2 positional arguments but 3 were given

Test with too few arguments
::
    >>> matrix = [[1, 2], [3, 4]]
    >>> print(matrix_divided(matrix))
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

Testing div with zero and non-int/non-float args:
::
    >>> matrix = [[1, 2], [3, 4]]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

    >>> matrix = [[1, 2], [3, 4]]
    >>> print(matrix_divided(matrix, "2"))
    Traceback (most recent call last):
    ...
    TypeError: div must be a number