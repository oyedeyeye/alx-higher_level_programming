# run test with python3 -m doctest -v ./tests/0-add_integer.txt

==================================
Test for module 0-add_integer.py
==================================

Since the module has only one function, first import the function.
::
    >>> add_integer = __import__('0-add_integer').add_integer

Numbers
=======
``add_integer()`` returns the sum of its arguments.
It accepts integer and floating point numbers.
Floats are type casted to integers.

``add_integer()`` can accept one or two argument.
If one argument is passed into the function, the second parameter
uses a default value of 98.
Other argument types raises a TypeError.

SUCCESS CASES
==============
Test with int and floats
::

    >>> print(add_integer(3, 4))
    7

    >>> print(add_integer(-1.1, 4))
    3

    >>> print(add_integer(3.9, 4.5))
    7

    >>> print(add_integer(-1.9, -8.5))
    -9

Test with one argument with default b=98 value:

::
    >>> print(add_integer(2))
    100

FAILED CASES:
=============

Without any argument:

::
    >>> print(add_integer(None))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> print(add_integer(None, None))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Test with extra argument:

::
    >>> print(add_integer(4, 2, 3))
    Traceback (most recent call last):
    ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Test with other input types as argument:

::
    >>> print(add_integer([1, 3, 4, ], 4))
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> print(add_integer(2, 'AAA'))
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

Test with maximum and minimum numbers python can handle

::

    >>> print(add_integer(float("inf")))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    >>> print(add_integer(float("-inf")))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

Test with Special float NaN in python

::

    >>> print(add_integer(float("NaN")))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer