# run test with python3 -m doctest -v ./tests/101-lazy_matrix_mul.txt

======================================
Test for module 101-lazy_matrix_mul.py
=======================================

The module has only one method, that we will import.
The module computes matrix multiplication dynamically
::
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

SUCCESS CASES
==============
::
    >>> m_a = [[1, 2], [3, 4]]
    >>> m_b = [[1, 2], [3, 4]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

    >>> m_a = [[1, 2]]
    >>> m_b = [[3, 4], [5, 6]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]
 
    >>> m_a = [[-1, -2], [3, -4.2]]
    >>> m_b = [[1.0, -2.0], [-3, 4]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[  5.   -6. ]
     [ 15.6 -22.8]]

    >>> m_a = [[1, 2, 5], [3, 2, 3]]
    >>> m_b = [[1, 3, 5, 2], [2, 1, 3, 4], [7, 3, 1, 1]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[40 20 16 15]
     [28 20 24 17]]



FAILED CASES
============
::

    >>> m_a = [[]]
    >>> m_b = [[3, 4], [5, 6]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)


    >>> m_a = [[1.0, 2.0], [2, 3]]
    >>> m_b = []
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)


Test with columns in m_a not matching rows in m_b

    >>> m_a = [[1, 2], [1, 2]]
    >>> m_b = [[3, 4], [5, 6], [7, 8]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


Different sized lists
    >>> m_a = [[1, 2], [1, 2]]
    >>> m_b =  [[1, 2], [1, 2, 3, 4]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> m_a =  [[1, 2], [1, 2, 3, 4]]
    >>> m_b = [[1, 2], [1, 2]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.


Other data types
::
    >>> m_a =  [["hey"], ["you"]]
    >>> m_b =  [["Holberton"], ["school"]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,1) and (2,1) not aligned: 1 (dim 1) != 2 (dim 0)

    >>> m_a = {(3, 3)}
    >>> m_b = [[1, 2], [1, 2]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

    >>> m_a =  "Holberton"
    >>> m_b = [[1, 2], [1, 2]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> m_a =  [[1, 2], [1, 2]]
    >>> m_b = "Holberton"
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> m_a = [[5, 6], [7, 8]]
    >>> m_b = [1, 2, 3, 4]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2,2) and (4,) not aligned: 2 (dim 1) != 4 (dim 0)

    >>> m_a = [[5, 6], [7, 8]]
    >>> m_b = [["Holberton"], ["school"]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

Missing Arguments
::
    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    >>> print(lazy_matrix_mul())
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

